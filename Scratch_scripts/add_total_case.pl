#!/usr/bin/perl -w
sub usage (){
    die qq(
#===========================================================================
#        USAGE:/home/yulywang/bin/accumulate_case.pl  -h -n 2,3,4 -g <Pathogenic Details File> <Burden test for excel file>
#        DESCRIPTION: -h : Display this help
#        Count the total of specific column in first file and add them in the next file
#
#        Option:
#        -n: col num with to add in first file
#        -g: gene col num to add in first file
#
#        Pathogenic Detail File: generated by PathogenicV4_pipeline.sh
#        Burden test for excel file: generated by Format_Brown_ResultV2.pl
#
#        Example: 
#        Ped Case Ctrl Gene
#        1   0    0    A
#        1   0    0    A
#        Output:
#        Ped_Total Case_Total Ctrl_Total Ped Case Ctrl Gene
#        2         0          0          1   0    0    A
#        2         0          0          1   0    0    A
#
#        Update note: change the existing of pos, avoid multiple allele lost
#        Author: Wang Yu
#        Mail: yulywang\@umich.edu
#        Created Time:  Mon 23 Dec 2019 04:20:34 PM EST
#===========================================================================
)
}
use strict;
use warnings;
use Getopt::Std;
$ARGV[1] || &usage();
our ($opt_h,$opt_n,$opt_g);
getopts("hn:g:");

#------ Input prepartion
my @N;
if(defined $opt_n){
	@N = split/\,/, $opt_n;
}else{
	&usage();
}

for my $i(0..$#N){
	$N[$i]--;	
}

if(defined $opt_g){
	$opt_g --;
}else{
	&usage();
}
#print join("\t",@N),"\n";

#----- Count the total number of gene
my %hash;
my %pos; # avoid duplication position
open PATHO, "$ARGV[0]";
while(my $line = <PATHO>){
	chomp $line;
	my @F= split/\s+/,$line;
	my $gene = $F[$opt_g];
	my $pos = $F[12];
	my $ref = $F[13];
	my $alt = $F[14];
	my @Group = @F[@N];
	#print join("\t",@Group),"\n";
	for my $i(0..$#Group){
		if(not exists $hash{$gene}{$N[$i]}){
			$hash{$gene}{$N[$i]} = $Group[$i]; # $N is the column number, $Group is the real number
		}elsif(exists $hash{$gene}{$N[$i]}){
			if(not exists $pos{$gene}{$N[$i]}{$pos}{$ref}{$alt}){ # update 03202020
				$hash{$gene}{$N[$i]} += $Group[$i]; # add only this is not duplication, avoid multiple samples were added several times. will underestimate multiple allelic
			}
		}
		$pos{$gene}{$N[$i]}{$pos}{$ref}{$alt}  = 1;
	}
}

#print $hash{'NF1'}{2},"\n";
#print $hash{'NF1'}{'3'},"\n";
#print $hash{'NF1'}{'4'},"\n";

open EXCEL, "$ARGV[1]";
my $header= <EXCEL>;
my $header1= <EXCEL>;
chomp $header;
chomp $header1;
print $header,"\t",join("\t",@N),"\n";
print $header1,"\t",join("\t",@N),"\n";

while(my $line = <EXCEL>){
	chomp $line;
	my @F = split/\s+/,$line;
	my $gene = $F[0];
	print "$line";
	#print "$gene";
	for my $i(0..$#N){
		#print "N:$N[$i]\n";
		if(exists $hash{$gene}{$N[$i]}){
			print "\t$hash{$gene}{$N[$i]}";
		}else{
			print "\t-";
		}
	}
	print "\n";
}
